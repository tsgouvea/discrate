function sma = stateMatrix()
% global BpodSystem
global TaskParameters
%% Define ports
LeftPort = floor(mod(TaskParameters.GUI.Ports_LMR/100,10));
CenterPort = floor(mod(TaskParameters.GUI.Ports_LMR/10,10));
RightPort = mod(TaskParameters.GUI.Ports_LMR,10);
% ValveTimes  = GetValveTimes(TaskParameters.GUI.rewardAmount, [LeftPort RightPort]);
% LeftPortOut = strcat('Port',num2str(LeftPort),'Out');
% CenterPortOut = strcat('Port',num2str(CenterPort),'Out');
% RightPortOut = strcat('Port',num2str(RightPort),'Out');
LeftPortIn = strcat('Port',num2str(LeftPort),'In');
CenterPortIn = strcat('Port',num2str(CenterPort),'In');
RightPortIn = strcat('Port',num2str(RightPort),'In');

LeftValve = 2^(LeftPort-1);
RightValve = 2^(RightPort-1);

LeftValveTime  = GetValveTimes(TaskParameters.GUI.rewardAmount, LeftPort);
RightValveTime  = GetValveTimes(TaskParameters.GUI.rewardAmount, RightPort);

if TaskParameters.GUI.LeftA
    PreL = TaskParameters.GUI.PreA;
    PreR = TaskParameters.GUI.PreB;
    PostL = TaskParameters.GUI.PostA;
    PostR = TaskParameters.GUI.PostB;
else
    PreL = TaskParameters.GUI.PreB;
    PreR = TaskParameters.GUI.PreA;
    PostL = TaskParameters.GUI.PostB;
    PostR = TaskParameters.GUI.PostA;
end
if TaskParameters.GUI.PreRandom
    PreL = exprnd(PreL);
    PreR = exprnd(PreR);
end
if TaskParameters.GUI.PostRandom
    PostL = exprnd(PostL);
    PostR = exprnd(PostR);
end
%%
sma = NewStateMatrix();
sma = AddState(sma, 'Name', 'state_0',...
    'Timer', 0,...
    'StateChangeConditions', {'Tup', 'wait_Cin'},...
    'OutputActions', {});
sma = AddState(sma, 'Name', 'wait_Cin',...
    'Timer', 0,...
    'StateChangeConditions', {CenterPortIn, 'wait_Sin'},...
    'OutputActions', {strcat('PWM',num2str(CenterPort)),255});
sma = AddState(sma, 'Name', 'wait_Sin',...
    'Timer', 0,...
    'StateChangeConditions', {LeftPortIn,'PreL',RightPortIn,'PreR'},...
    'OutputActions',{strcat('PWM',num2str(LeftPort)),255,strcat('PWM',num2str(RightPort)),255});
assert(TaskParameters.GUI.rewardProb>=0 & TaskParameters.GUI.rewardProb<=1)
if rand < TaskParameters.GUI.rewardProb
    sma = AddState(sma, 'Name', 'PreL',...
        'Timer', PreL,...
        'StateChangeConditions', {'Tup','rewarded_Lin'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'PreR',...
        'Timer', PreR,...
        'StateChangeConditions', {'Tup','rewarded_Rin'},...
        'OutputActions', {});
else
    sma = AddState(sma, 'Name', 'PreL',...
        'Timer', PreL,...
        'StateChangeConditions', {'Tup','unrewarded_Lin'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'PreR',...
        'Timer', PreR,...
        'StateChangeConditions', {'Tup','unrewarded_Rin'},...
        'OutputActions', {});
end
sma = AddState(sma, 'Name', 'rewarded_Lin',...
    'Timer', 0,...
    'StateChangeConditions', {LeftPortIn,'water_L'},...
    'OutputActions', {'SoftCode',2,strcat('PWM',num2str(LeftPort)),255});
sma = AddState(sma, 'Name', 'water_L',...
    'Timer', LeftValveTime,...
    'StateChangeConditions', {'Tup','PostL'},...
    'OutputActions', {'ValveState', LeftValve});
sma = AddState(sma, 'Name', 'unrewarded_Lin',...
    'Timer', 0,...
    'StateChangeConditions', {LeftPortIn,'PostL'},...
    'OutputActions', {'SoftCode',2,strcat('PWM',num2str(LeftPort)),255});
sma = AddState(sma, 'Name', 'PostL',...
    'Timer', PostL,...
    'StateChangeConditions', {'Tup','exit'},...
    'OutputActions', {});
sma = AddState(sma, 'Name', 'rewarded_Rin',...
    'Timer', 0,...
    'StateChangeConditions', {RightPortIn,'water_R'},...
    'OutputActions', {'SoftCode',2,strcat('PWM',num2str(RightPort)),255});
sma = AddState(sma, 'Name', 'water_R',...
    'Timer', RightValveTime,...
    'StateChangeConditions', {'Tup','PostR'},...
    'OutputActions', {'ValveState', RightValve});
sma = AddState(sma, 'Name', 'unrewarded_Rin',...
    'Timer', 0,...
    'StateChangeConditions', {RightPortIn,'PostR'},...
    'OutputActions', {'SoftCode',2,strcat('PWM',num2str(RightPort)),255});
sma = AddState(sma, 'Name', 'PostR',...
    'Timer', PostR,...
    'StateChangeConditions', {'Tup','exit'},...
    'OutputActions', {});
end